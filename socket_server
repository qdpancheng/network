// mysocket.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <WinSock2.h>

//如果要使用winsocket API，就要包含ws2_32.lib这个库
#pragma comment(lib, "ws2_32.lib")

using namespace std;

#define  BUFSIZE 64
#define  PORT 4000

int _tmain(int argc, _TCHAR* argv[])
{
	WSADATA		wsad;				//WSADATA变量
	SOCKET	Server;					//服务器套接字
	SOCKET	Client;					//客户端套接字
	SOCKADDR_IN	addrServ,addrClient;		//服务器地址
	char buf[MAX_PATH];				//接收数据的缓冲区
	int RET;									//返回标志
	//初始化套接字动态库
	if (WSAStartup(MAKEWORD(2,2),&wsad) != 0)
	{
		cout <<"初始化套接字动态库失败!\n";
		return 1;
	}
	//创建套接字
	Server = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (INVALID_SOCKET  == Server)
	{
		cout << "创建套接字失败" << endl;
		return 1;
	}
	//服务器套接字地址
	memset(&addrServ, 0x00, sizeof(sockaddr_in));
	addrServ.sin_family = AF_INET;
	addrServ.sin_port = htons(PORT);
	//addrServ.sin_addr.s_addr = inet_addr("127.0.0.1");
	addrServ.sin_addr.S_un.S_addr = htonl(INADDR_ANY);
	//绑定套接字
	RET = bind(Server, (sockaddr*)&addrServ,sizeof(addrServ));
	if (RET == SOCKET_ERROR)
	{
		cout << "绑定失败" <<endl;
		return 1;
	}
	//开始监听
	RET = listen(Server,2);
	if (RET == SOCKET_ERROR)
	{
		cout << "监听失败" << endl;
		return 1;
	}
	cout << "Server " << PORT << " is listening..." <<endl;
	while (true){
	//接收客户端请求		accept
	int len = sizeof(addrClient);
	Client = accept(Server,(struct sockaddr*)&addrClient, & len);
	if (INVALID_SOCKET == Client)
	{
		cout << "accept failed" << endl;
		return 1;
	}
	cout << "客户端连接" ;

	//接收客户端数据
	RET = recv(Client, buf, MAX_PATH, 0);
	cout << buf << endl;
	}
	//退出   关闭套接字
	closesocket(Server);
	closesocket(Client);
	WSACleanup();
	return 0;
}

